Design document for project 2

Group01

**************TASK 1***********************************************

#############UserKernel.java########################

create class called File which contains,

	Object OpenFile
	int counter = 1;
	boolean isWriting = FALSE;
	boolean isLinked = TRUE;

	methods

		OpenFile getOpenFile()
			returns OpenFile object

		int getCounter()
			return int of counter

		void incCounter()
			increments counter by one

		void decCounter()
			decrements counter by one

		boolean isOpen()
			returns TRUE is counter is greater than zero

		boolean getIsWriting()
			returns isWriting

		void setWriting(boolean writing)
			isWriting = writing;

		boolean getIsLinked()
			returns isLinked

		void setIsLinked(boolean linked)
			isLinked = linked


Create an array of type File in UserKernel.java 64 rows long which stores all global File objects which are currently created.


#################UserProcess.java###########################


Method int creat(char *name)

	check to see if OpenFile array exists 
		if FALSE, create new array 18 rows long and new fileSystem, assign elements 0 and 1 to system console
		if TRUE, loop through array from 2 to 17 and check for name

	if name does not exist in userProcess array then check global array
	  
	  if FALSE

		Create new File object with OpenFile object inside in global array in next open spot and increase counter to 1
		Create new pointer in userProcess array to OpenFile object

		check isLinked()
			if TRUE
				return integer of index in userProcess array
			if FALSE
				return -1

	  if TRUE then incCounter() and place pointer to file in first open userProcess element spot
		
		check isLinked()
			if TRUE
				return fileDescriptor (local index)
			if FALSE 
				return -1

	if name does exist in local array
		return file descriptor and call incCounter() on file

	If indexOutOfBounds Exception then return -1



Method int open(char *name)

	check to see if OpenFile array exists 
		if FALSE 
			return -1
		if TRUE
			loop through local array from elements 2 to 17 and check for name
				if TRUE

					call setIsOpen() and set TRUE
					return file descriptor (local index)

				if FALSE

					check global array for filename

						If TRUE

						  check isLinked()
						    if TRUE
							create pointer in local array pointing to global array
							increment counter by one of File.incCounter()
							return Openfile descriptor (local index)
						    if FALSE 
							return -1

						if FALSE
							return -1


Method int read(int fileDescriptor, void *buffer, int count)

		check if fileDescriptor is valid
			if FALSE
				return -1
			if TRUE
			  If file descriptor is not 0 or 1 check to make sure file is open by calling isOpen()
				
				point buffer to byte[] array
				read in number of bytes
					
				if number of bytes read equals count
					return count
					
				if number of bytes read is less than count
					if(fileDescriptor != 0 | 1)
						then print "End of File"
					else
						return 0


Method int write(int fileDescriptor, void *buffer, int count)

	check if fileDescriptor is valid
		if FALSE
			return -1
		if TRUE

		  if fileDescriptor != 1 | 0 check the file is open by calling isOpen()

			point buffer to byte array that already has stuff in it
			
			set isWriting(TRUE)

				write buffer to file

			set isWriting(FALSE)

		if bytes read is less than count
			return -1
		else
			return 0
						
	
Method int close(int fileDescriptor)
	
	check if fileDescriptor is valid and not 0 or 1

		check if file isOpen()
			
			if FALSE 
				return -1

			if TRUE then check if isWriting()
				if FALSE then File.decCounter()

				if TRUE then wait for isWriting() = FALSE then call File.decCounter()
			
	if isOpen() now equals FALSE then call unlink on File to delete it.



Method unlink(char *name)

	check for File.OpenFile.getName() in global array
		
		if file exists in global array then check if it isOpen()

			if FALSE then set global array element to NULL

			if TRUE then call setIsLinked() on file and set to FALSE


Changes to handleHalt()

	check pid to make sure it's the root process (should be PID=0)


##############TEST CASES################

Try to open files, close them, unlink them then try to re-open them, also call halt from a running process that isn't root. Read and write to open files, read/write to 1 and 0 fileDescriptor without opening them.


########################################

*************************TASK 2*******************************************


*************UserKernal.java********************

Create a linked list to use as a global page table. Call getNumPhysPages() and set the max size of the Linked List to this number. Set the head of the global page table to the first available page.


************UserProcess.java********************

Check if pageTable is already created, it not create an array for the pageTable, make it 8 elements/pages long (as per proj2 instructions).

	Create new array called TranslationEntry[] called translations1

	This pageTable will request free pages from the UserKernal global page table. Ask for the head of the list and then load that page, then move the head of the list, load that page, etc., Until all 8 pages requested are placed in the array.

	Then it will request that the kernel load in the program from memory

	It will use the translations1 array to translate between the physical memory and the virtual memory.

	The TranslationsEntry.java has a TranslationEntry() method that takes in a virtual page, a physical page, and all necessary bits. I'm not sure how to get this to work exactly or how it knows which physical memory location to load. You can use Processor.getMemory() and getNumPhysPages() 

	When the program exits() make sure that it sets the bit in the global array to make sure it is free, and move the head of the list.


**********read/writeVirtualMemory****************

Make sure they check the PID of the requesting process and check which virtual pages it belongs to, that way a process can not write/read to another processes table.

*********loadSection()*************************

I don't understand what to do for this one, I'm assuming it does some of the actions that are included in UserProcess.java above. It loads the program into physical memory.



#######################TEST CASES########################


Load programs into memory. 

Try and fill memory and load another process.

Load multiple programs into one process and see if the memory fails.

Close programs and make sure memory is freed.

Open 2 processes and try to read/write to each other's page table which should not work.


##########################################################



*******************************************TASK 3********************************************


****************join()**************************

Only a child can join a parent so make sure that when the parent calls join it knows the PID of the created process and those underneath it. Possibly keep a linked list in the process so it knows which child PIDs are under it.

Make sure to check childExit = FALSE so the child does indeed exist before joining it (check exit() for explanation).

Inside the UserKernel.java create a PID counter that counts up everytime a new process is created.

In UserProcess.java need a field called " int pid " that is set by the kernel on startup.

**************exit()*************************

Set global page table to release virtual memory and physical memory. Set PID and name to null. Process is no longer accessible. 

Parent process should have a method called childExit() that is called by the child when it exits and sets " boolean childExit = TRUE "

A process -> join(B process)

B.exit()

B calls A.childExit()

A.childExit() makes boolean A.childExit = TRUE;

Now the parents process knows that it cannot call join again on that process since it exited.
